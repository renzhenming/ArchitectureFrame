//////////--------------------AOP配置-------------------///////////////
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

repositories {
    mavenCentral()
}
//////////--------------------AOP配置-------------------///////////////

apply plugin: 'com.android.application'

//apply from:"${project.rootDir}/config.gradle"

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.app.rzm"
        vectorDrawables.useSupportLibrary = true
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters project.ext.abiFilters
        }

        compileOptions{
            sourceCompatibility project.ext.sourceCompatibility
            targetCompatibility project.ext.targetCompatibility
        }
    }

    buildTypes {
        release {
            minifyEnabled project.ext.minifyEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
}

dependencies {
    implementation project.ext.constraintLayout
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':commonlibrary')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //针对libs下的.jar库
    implementation files('libs/aspectjrt.jar')
    implementation project.ext.supportAppcompat
    implementation project.ext.supportV4
    implementation project.ext.supportDesign
    implementation project.ext.butterKnife
    //compile 'com.github.yangjie10930:EpMedia:v0.9.5'
}

//////////--------------------AOP配置-------------------///////////////


final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
//////////--------------------AOP配置-------------------///////////////

